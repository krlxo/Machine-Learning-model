ggplot(faithful,aes(x=waiting,y=eruptions)) +
geom_smooth(method=lm, color="red",size=1.1) + geom_point()
summary(faithful)
ggplot() +
# Interesting Facts
# The ggplot() function development
# followed the design and terminology
# described in Leland Wilkinson's illuminating
# book, "The Grammar of Graphics".
#
# In the book, the term aesthetics refers to
# the Greek word that means perception.
# In the syntax above,the aes() function
# pairs aesthetic key words to data.frame/tibble variables.
#
# The most commonly used aesthetics are
# x and y position, size, shape, fill and color.
# ggplot uses these aesthetics when rendering
# geometric objects that we can see.
#
# Functions with prefix "geom_" specify
# geometric objects.
# Three examples are geom_point(), geom_line(), and
# geom_polygon().
# let's use geom function arguments
# to change aesthetic constants.
# Below the blue filled circle wit
ggplot(faithful,aes(x=waiting,y=eruptions)) +
geom_point()
ggplot(diamonds , aes( x = color) ) +
geom_bar() +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+ hw
ggplot(diamonds , aes( x = color) ) +
geom_bar() +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+ hw
ggplot() +
# Interesting Facts
# The ggplot() function development
# followed the design and terminology
# described in Leland Wilkinson's illuminating
# book, "The Grammar of Graphics".
#
# In the book, the term aesthetics refers to
# the Greek word that means perception.
# In the syntax above,the aes() function
# pairs aesthetic key words to data.frame/tibble variables.
#
# The most commonly used aesthetics are
# x and y position, size, shape, fill and color.
# ggplot uses these aesthetics when rendering
# geometric objects that we can see.
#
# Functions with prefix "geom_" specify
# geometric objects.
# Three examples are geom_point(), geom_line(), and
# geom_polygon().
# let's use geom function arguments
# to change aesthetic constants.
# Below the blue filled circle wit
ggplot(faithful,aes(x=waiting,y=eruptions)) +
geom_point()
library(ggplot2)
install.packages("ggplot")
ggplot() +
# Interesting Facts
# The ggplot() function development
# followed the design and terminology
# described in Leland Wilkinson's illuminating
# book, "The Grammar of Graphics".
#
# In the book, the term aesthetics refers to
# the Greek word that means perception.
# In the syntax above,the aes() function
# pairs aesthetic key words to data.frame/tibble variables.
#
# The most commonly used aesthetics are
# x and y position, size, shape, fill and color.
# ggplot uses these aesthetics when rendering
# geometric objects that we can see.
#
# Functions with prefix "geom_" specify
# geometric objects.
# Three examples are geom_point(), geom_line(), and
# geom_polygon().
# let's use geom function arguments
# to change aesthetic constants.
# Below the blue filled circle wit
ggplot(faithful,aes(x=waiting,y=eruptions)) +
geom_point()
ggplot(faithful,aes(x=waiting,y=eruptions)) +
geom_point()
ggplot(faithful,aes(x=waiting,y=eruptions)) +
geom_point(shape=21, size=2.,fill="green",color="black")+
geom_smooth(method=loess,size=1.2, span=.6)+
labs(x="Waiting Time Between Eruptions In Minutes",
y="Eruption Duration in Minutes",
title="Old Faithful Geyser Eruptions")
ggplot(faithful,aes(x=waiting)) +
geom_histogram(binwidth=2,
fill="cornsilk",color="black")+
labs(x="Waiting Time Between Eruptions In Minutes",
y="Counts",
title="Old Faithful Geyser Eruptions")+hw
ggplot(faithful,aes(x=waiting,y = ..density..)) +
geom_histogram(binwidth=2,
fill="cornsilk",color="black")+
labs(x="Waiting Time Between Eruptions In Minutes",
y="Density",
title="Old Faithful Geyser Eruptions") + hw
ggplot(faithful,aes(x=waiting,y = ..density..)) +
geom_histogram(binwidth=2,
fill="cornsilk",color="black")+
labs(x="Waiting Time Between Eruptions In Minutes",
y="Density",
title="Old Faithful Geyser Eruptions")
ggplot() +
# Interesting Facts
# The ggplot() function development
# followed the design and terminology
# described in Leland Wilkinson's illuminating
# book, "The Grammar of Graphics".
#
# In the book, the term aesthetics refers to
# the Greek word that means perception.
# In the syntax above,the aes() function
# pairs aesthetic key words to data.frame/tibble variables.
#
# The most commonly used aesthetics are
# x and y position, size, shape, fill and color.
# ggplot uses these aesthetics when rendering
# geometric objects that we can see.
#
# Functions with prefix "geom_" specify
# geometric objects.
# Three examples are geom_point(), geom_line(), and
# geom_polygon().
# let's use geom function arguments
# to change aesthetic constants.
# Below the blue filled circle wit
ggplot(faithful,aes(x=waiting,y=eruptions)) +
geom_point()
rlang::last_error()
ggplot() +
# Interesting Facts
# The ggplot() function development
# followed the design and terminology
# described in Leland Wilkinson's illuminating
# book, "The Grammar of Graphics".
#
# In the book, the term aesthetics refers to
# the Greek word that means perception.
# In the syntax above,the aes() function
# pairs aesthetic key words to data.frame/tibble variables.
#
# The most commonly used aesthetics are
# x and y position, size, shape, fill and color.
# ggplot uses these aesthetics when rendering
# geometric objects that we can see.
#
# Functions with prefix "geom_" specify
# geometric objects.
# Three examples are geom_point(), geom_line(), and
# geom_polygon().
# let's use geom function arguments
# to change aesthetic constants.
# Below the blue filled circle wit
ggplot(faithful,aes(x=waiting,y=eruptions)) +
geom_point()
ggplot(faithful,aes(x=waiting,y=eruptions)) +
geom_point()
ggplot(faithful,aes(x=waiting,y=eruptions)) +
geom_smooth(method=lm, color="red",size=1.1) + geom_point()
ggplot(faithful,aes(x=waiting,y=eruptions)) +
geom_point(shape=21, size=2.,fill="green",color="black")+
geom_smooth(method=loess,size=1.2, span=.6)+
labs(x="Waiting Time Between Eruptions In Minutes",
y="Eruption Duration in Minutes",
title="Old Faithful Geyser Eruptions")
ggplot(diamonds , aes( x = color) ) +
geom_bar() +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+ hw
library(ggplot2)
ggplot(diamonds , aes( x = color) ) +
geom_bar() +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+ hw
ggplot(diamonds , aes( x = color) ) +
geom_bar() +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+
ggplot(diamonds , aes( x = color) ) +
geom_bar(fill="cornsilk",color='black') +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+ hw
library(hw)
library(hw(2))
library(hw)
ggplot(diamonds , aes( x = color) ) +
geom_bar() +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+
ggplot(diamonds , aes( x = color) ) +
geom_bar(fill="cornsilk",color='black') +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+
# Also use the diamond color factor to control
# the bar fill color.
# This example used default fill colors
ggplot(diamonds , aes( x=color, fill=color))+ geom_bar() + hw
source('C:/Users/kredd/Downloads/hw.R')
ggplot(diamonds , aes( x = color) ) +
geom_bar() +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+
ggplot(diamonds , aes( x = color) ) +
geom_bar(fill="cornsilk",color='black') +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+
# Also use the diamond color factor to control
# the bar fill color.
# This example used default fill colors
ggplot(diamonds , aes( x=color, fill=color))+ geom_bar() + hw
rlang::last_error()
ggplot(diamonds , aes( x = color) ) +
geom_bar() +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+
ggplot(diamonds , aes( x = color) ) +
geom_bar(fill="cornsilk",color='black') +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+
# Also use the diamond color factor to control
# the bar fill color.
# This example used default fill colors
ggplot(diamonds , aes( x=color, fill=color))+ geom_bar() + hw
library(tidyverse)
ggplot(diamonds , aes( x = color) ) +
geom_bar() +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+
ggplot(diamonds , aes( x = color) ) +
geom_bar(fill="cornsilk",color='black') +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+
# Also use the diamond color factor to control
# the bar fill color.
# This example used default fill colors
ggplot(diamonds , aes( x=color, fill=color))+ geom_bar() + hw
ggplot(diamonds, aes(x=color, fill=color))+
geom_bar(color="black") +        # black outline
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+ hw +
theme(legend.position="none")
ggplot(diamonds , aes( x = color) ) +
geom_bar() +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+
ggplot(diamonds , aes( x = color) ) +
geom_bar(fill="cornsilk",color='black') +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+
# Also use the diamond color factor to control
# the bar fill color.
# This example used default fill colors
ggplot(diamonds , aes( x=color, fill=color))+ geom_bar() + hw
ggplot(diamonds , aes( x = color) ) +
geom_bar() +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+
ggplot(diamonds , aes( x = color) ) +
geom_bar(fill="cornsilk",color='black') +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+
# Also use the diamond color factor to control
# the bar fill color.
# This example used default fill colors
ggplot(diamonds ,aes( x=color, fill=color))+ geom_bar() + hw
ggplot(diamonds, aes(x=color, fill=color))+
geom_bar(color="black") +        # black outline
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+ hw +
theme(legend.position="none")
ggplot(diamonds , aes( x = color) ) +
geom_bar() +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+
ggplot(diamonds , aes( x = color) ) +
geom_bar(fill="cornsilk",color='black') +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+
# Also use the diamond color factor to control
# the bar fill color.
# This example used default fill colors
ggplot(diamonds ,aes( x=color, fill=color))+ geom_bar() + hw
ggplot(diamonds , aes( x = color) ) +
geom_bar() +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+
ggplot(diamonds , aes( x = color) ) +
geom_bar(fill="cornsilk",color='black') +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+
# Also use the diamond color factor to control
# the bar fill color.
# This example used default fill colors
ggplot(diamonds ,aes(x=color, fill=color))+ geom_bar() + hw
ggplot(diamonds, aes( x=color, fill=cut) )+
geom_bar(color="black") +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set",
fill="Cut") + hw
ggplot(diamonds, aes(x=color, fill=color))+
geom_bar(color="black") +        # black outline
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set")+ hw +
theme(legend.position="none")
ggplot(diamonds,aes(x=color,fill=cut))+
geom_bar(color=gray(.55)) +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set",
fill="Cut")+
scale_fill_manual(
values=c("red","orange",rgb(0,.4,0),'cyan','violet'))+ hw
ggplot(diamonds, aes( x=color, fill=cut) )+
histogram(color="black") +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set",
fill="Cut") + hw
ggplot(diamonds, aes( x=color, fill=cut) )+
geom_histogram(color="black") +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set",
fill="Cut") + hw
ggplot(diamonds, aes( x=color, fill=cut) )+
geom_bar(color="black") +
labs(x="Diamond Color Classes",
y="Count",
title="Diamond Data Set",
fill="Cut") + hw
library(readr)
Advertising_1_ <- read_csv("Advertising(1).csv")
View(Advertising_1_)
library(psych)
pairs.panels(Boston)
corr.test(Boston)
#fitting the model
fit = lm(medv~lstat, data=Boston);
plot(fit)
# extracting functions from fit
fit$coefficients
fit$residuals
fit$df.residual
summary(fit);
confint(fit); # confidence interval for coefficients 95% is the default
# can define the level as well
confint(fit, level =0.99 )
predict(fit, data.frame(lstat=c(5,10,15)), interval="confidence"); # confidence interval for averaged response.
predict(fit, data.frame(lstat=c(5,10,15)), interval="prediction")
plot(Boston$lstat,Boston$medv)
abline(fit, col="red")
##### ggplot
library(ggplot2)
(ggplot(Boston,aes(x = lstat,y = medv)) +
geom_point(shape = 21,fill = "red",
color = "black",size = 2) +
stat_smooth(method = lm,
color = "blue",fill = "cyan") +
labs(
x = "Lower Status Percent of Population",
y = "Median House Value ($1000)",
title = "Boston Housing Data"))
plot(lstat, medv)
abline(fit);
# model diagnositic plots
par(mfrow=c(2,2))
plot(fit)
## Multiple Linear Regression
fit = lm(medv~lstat+age, data=Boston)
summary(fit)
shapiro.test(fit$residuals)
# fit a linear model with all predictors
fit = lm(medv~., data=Boston)
pairs.panels(Boston)
corr.test(Boston)
library(psych)
pairs.panels(Boston)
library(readr)
Body_Fatt <- read_csv("Body Fatt.csv")
View(Body_Fatt)
data(Body_fatt)
data(Body_Fatt)
data(Body_Fatt)
data(Body_Fatt)
Body_Fatt <- read.csv("~"C:\\Users\\kredd\\Downloads\\Body Fatt.csv"")
Body_Fatt <- read.csv("C:\\Users\\kredd\\Downloads\\Body Fatt.csv"")
data(Body_Fatt)
bodyfat$height[bodyfat$case==42] <- 69.5   # apparent error
bodyfat <- bodyfat[-which(bodyfat$case==39),]  # cp. Royston $\amp$ Sauerbrei, 2004
mfp(siri ~ fp(age, df = 4, select = 0.1) + fp(weight, df = 4, select = 0.1)
+ fp(height, df = 4, select = 0.1), family = gaussian, data = bodyfat)
Body_Fatt <- read.csv("C:\\Users\\kredd\\Downloads\\Body Fatt.csv")
Body_Fatt <- read.csv("C:\\Users\\kredd\\Downloads\\Body Fatt.csv")
data(Body_Fatt)
data(Body_Fatt)
Body_Fatt <- read.csv("C:\\Users\\kredd\\Downloads\\Body Fatt.csv")
data(Body_Fatt)
data(Body_Fatt)
data(Body_Fatt)
bodyfat$height[bodyfat$case==42] <- 69.5   # apparent error
Body_Fatt$height[bodyfat$case==42] <- 69.5   # apparent error
Body_Fatt$height[Body_Fatt$case==42] <- 69.5   # apparent error
Body_Fatt <- Body_Fatt[-which(Body_Fatt$case==39),]  # cp. Royston $\amp$ Sauerbrei, 2004
mfp(siri ~ fp(age, df = 4, select = 0.1) + fp(weight, df = 4, select = 0.1)
+ fp(height, df = 4, select = 0.1), family = gaussian, data = Body_Fatt)
Body_Fatt <- read.csv("C:\\Users\\kredd\\Downloads\\Body_Fatt.csv")
Body_Fatt <- read.csv("C:\\Users\\kredd\\Downloads\\Body Fatt.csv")
data(Body_Fatt)
library(data)
library(tidyverse)
data(Body_Fatt)
data(Body_Fatt)
Body_Fatt <- read.csv("C:\\Users\\kredd\\Downloads\\Body Fatt.csv")
data(Body_Fatt)
library(readr)
Body_Fatt <- read_csv("Body Fatt.csv")
View(Body_Fatt)
Body_Fatt <- read.csv("C://Users//kredd//Downloads//Body Fatt.csv")
data(Body_Fatt)
data(Body_Fatt)
Body_Fatt$height[Body_Fatt$case==42] <- 69.5   # apparent error
Body_Fatt <- read.csv("C://Users//kredd//Downloads//Body Fatt.csv", as.is= TRUE)
Body_Fatt$height[Body_Fatt$case==42] <- 69.5   # apparent error
data(Body_Fatt)
library(mplot)
data(Body_Fatt)
bodyfat.lm = lm(Bodyfat ~ Neck + Chest + Abdo + Hip + Thigh + Knee + Ankle + Bic + Fore + Wrist, data=subset(bodyfat,select=-Id))
summary(bodyfat.lm)
plot(Body_Fatt$Body_Fatt, main = "Real Body_Fatt", ylab="Body_Fatt", xlab="Number")
library("dplyr")
bf=read.csv("Body_Fatt.csv")
bf=read.csv("Body_Fatt.csv")
bodyfat=bf %>% select(-c(Subject,Density))
Body_Fatt=bf %>% select(-c(Subject,Density))
bdyft=read.csv("Body_Fatt.csv")
bdyft=read.csv("Body_Fatt")
library(readr)
bodyfat_2_ <- read_csv("bodyfat (2).csv")
View(bodyfat_2_)
library("dplyr")
bf=read.csv("bodyfat_2.csv")
bf=read.csv("bodyfat_2.csv")
bodyfat=bf %>% select(-c(Subject,Density))
sum(is.na(bodyfat))
n = nrow(bodyfat)
bodyfat_2_=bf %>% select(-c(Subject,Density))
sum(is.na(bodyfat_2_))
n = nrow(bodyfat_2_)
bf=read.csv("bodyfat_2_.csv")
bf=read.csv("bodyfat_2_.csv")
bf=read.csv("/bodyfat_2_.csv")
library(leaps)
bodyfat_2_summary$rsq
bodyfat_2_fit=regsubsets(X.Body.Fat~.,bodyfat_2_)
